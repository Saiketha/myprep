pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS = credentials('docker-hub-creds')  // Docker Hub credentials
        GIT_CREDENTIALS    = credentials('git-creds')         // Git credentials
        SONARQUBE_SERVER   = 'SonarQubeServer'                 // Jenkins SonarQube server config name
        IMAGE_REPO         = 'yourdockerhubuser/yourapp'       // Docker image repo
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.IMAGE_TAG = env.BUILD_NUMBER
                    sh "docker build -t ${IMAGE_REPO}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh """
                   trivy image --format table --output report.xml ${image_repo}:${image_tag}
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub-creds') {
                        sh "docker push ${IMAGE_REPO}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Update Helm Values') {
            steps {
                script {
                    def yamlFile = ''

                    switch(env.BRANCH_NAME) {
                        case 'dev':
                            yamlFile = 'values/dev.yaml'
                            break
                        case 'test':
                            yamlFile = 'values/test.yaml'
                            break
                        case 'release':
                            yamlFile = 'values/prod.yaml'
                            break
                        default:
                            error "Unsupported branch: ${env.BRANCH_NAME}"
                    }

                    sh """
                       sed -i 's|tag: .*|tag: "${IMAGE_TAG}"|' ${yamlFile}
                    """
                }
            }
        }

        stage('Git Commit & Push') {
            steps {
                script {
                    sh """
                       git config user.name "Jenkins"
                       git config user.email "jenkins@ci"
                       git add values/*.yaml
                       git commit -m "Update image tag to ${IMAGE_TAG} for ${env.BRANCH_NAME}"
                       git push https://${GIT_CREDENTIALS_USR}:${GIT_CREDENTIALS_PSW}@github.com/your-org/your-repo.git HEAD:${env.BRANCH_NAME}
                    """
                }
            }
        }
    }
}