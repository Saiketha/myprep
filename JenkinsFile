pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS = credentials('docker-hub-creds')       // DockerHub
        GIT_CREDENTIALS     = credentials('git-creds')              // Git
        SONARQUBE_SERVER    = 'SonarQubeServer'                     // Jenkins config name
        IMAGE_REPO          = 'yourdockerhubuser/yourapp'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${env.SONARQUBE_SERVER}") {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    IMAGE_TAG = "${env.BUILD_NUMBER}"
                    sh "docker build -t $IMAGE_REPO:$IMAGE_TAG ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh """
                trivy image --exit-code 0 --severity HIGH,CRITICAL $IMAGE_REPO:$IMAGE_TAG || true
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub-creds') {
                        sh "docker push $IMAGE_REPO:$IMAGE_TAG"
                    }
                }
            }
        }

        stage('Update Helm Values') {
            steps {
                script {
                    def yamlFile = ""

                    if (env.BRANCH_NAME == "dev") {
                        yamlFile = "values/dev.yaml"
                    } else if (env.BRANCH_NAME == "test") {
                        yamlFile = "values/test.yaml"
                    } else if (env.BRANCH_NAME == "release") {
                        yamlFile = "values/prod.yaml"
                    } else {
                        error "Unsupported branch: ${env.BRANCH_NAME}"
                    }

                    sh """
                        sed -i 's|tag: .*|tag: "$IMAGE_TAG"|' $yamlFile
                    """
                }
            }
        }

        stage('Git Commit & Push') {
            steps {
                script {
                    sh """
                        git config user.name "Jenkins"
                        git config user.email "jenkins@ci"
                        git add values/*.yaml
                        git commit -m "Update image tag to $IMAGE_TAG for ${env.BRANCH_NAME}"
                        git push https://${GIT_CREDENTIALS_USR}:${GIT_CREDENTIALS_PSW}@github.com/your-org/your-repo.git HEAD:${env.BRANCH_NAME}
                    """
                }
            }
        }
    }
}